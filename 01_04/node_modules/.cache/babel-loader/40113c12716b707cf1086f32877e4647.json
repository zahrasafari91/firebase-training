{"ast":null,"code":"var _jsxFileName = \"/Users/zahra/Desktop/repository/firebase-training/01_04/src/reviews/WriteAReviewPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button, ErrorMessage, Heading, MaxWidthContentSection, Rating, TextArea, Thumbnail, UploadMultipleFilesButton } from '../ui';\nimport { mapAsync, readFile } from '../util';\nconst Content = styled.div`\n    margin: 0 32px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n`;\nconst ReviewFieldsTable = styled.table`\n    width: 100%;\n    padding: 32px;\n\n    td {\n        padding: 16px;\n    }\n`;\nconst FullWidthButton = styled(Button)`\n    width: 100%;\n`;\n/*\n    This component allows users to write and submit reviews for a restaurant.\n    This includes uploading photos of their experience at the restaurant that will\n    be displayed on their review.\n*/\n\nexport const WriteAReviewPage = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [restaurant, setRestaurant] = useState({});\n  const [showError, setShowError] = useState(false);\n  const [ratingValue, setRatingValue] = useState(0);\n  const [commentsValue, setCommentsValue] = useState('');\n  const [imageFiles, setImageFiles] = useState([]);\n  const [imageUrls, setImageUrls] = useState([]); // This is how we get URL parameters in React\n\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const {\n    name,\n    imageUrl\n  } = restaurant || {};\n  useEffect(() => {// Firebase code for loading the restaurant goes here\n  }, [id]); // Selecting files can be a tiny bit complex, so I've taken\n  // care of that logic for you.\n\n  const handleFileSelect = async files => {\n    setImageFiles(files);\n    const urls = await mapAsync(files, readFile);\n    setImageUrls(urls);\n  };\n\n  const onClickSubmitReview = async () => {\n    // Check to make sure the user has actually filled out the form\n    if (ratingValue > 0 || commentsValue.length > 0) {// Firebase code for submitting review goes here\n    } else {\n      setShowError(true);\n    }\n  };\n\n  return isLoading ? /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 24\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(MaxWidthContentSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Write a Review for \", name), /*#__PURE__*/React.createElement(Thumbnail, {\n    height: \"300px\",\n    width: \"600px\",\n    url: imageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), showError ? /*#__PURE__*/React.createElement(ErrorMessage, {\n    style: {\n      marginTop: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, \"Please fill out all fields\") : null, /*#__PURE__*/React.createElement(ReviewFieldsTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, \"How would you rate your overall experience?\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Rating, {\n    id: \"customer-rating\",\n    name: \"star-rating\",\n    value: ratingValue,\n    onChange: (_, newValue) => {\n      setShowError(false);\n      setRatingValue(newValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, \"Comments/Details\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    value: commentsValue,\n    onChange: e => {\n      setShowError(false);\n      setCommentsValue(e.target.value);\n    },\n    cols: \"40\",\n    rows: \"5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }, \"Have any photos to share?\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(UploadMultipleFilesButton, {\n    onFilesUploaded: handleFileSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      padding: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, imageUrls.map(url => /*#__PURE__*/React.createElement(\"img\", {\n    key: url,\n    src: url,\n    alt: \"something\",\n    height: \"100\",\n    style: {\n      display: 'inline',\n      margin: '0 4px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(FullWidthButton, {\n    onClick: onClickSubmitReview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, \"Submit Review\")));\n};","map":{"version":3,"sources":["/Users/zahra/Desktop/repository/firebase-training/01_04/src/reviews/WriteAReviewPage.js"],"names":["React","useState","useEffect","useParams","useHistory","styled","Button","ErrorMessage","Heading","MaxWidthContentSection","Rating","TextArea","Thumbnail","UploadMultipleFilesButton","mapAsync","readFile","Content","div","ReviewFieldsTable","table","FullWidthButton","WriteAReviewPage","isLoading","setIsLoading","restaurant","setRestaurant","showError","setShowError","ratingValue","setRatingValue","commentsValue","setCommentsValue","imageFiles","setImageFiles","imageUrls","setImageUrls","id","history","name","imageUrl","handleFileSelect","files","urls","onClickSubmitReview","length","marginTop","_","newValue","e","target","value","display","flexDirection","padding","map","url","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { \n    Button,\n    ErrorMessage,\n    Heading,\n    MaxWidthContentSection,\n    Rating,\n    TextArea,\n    Thumbnail,\n    UploadMultipleFilesButton,\n} from '../ui';\nimport { mapAsync, readFile } from '../util';\n\nconst Content = styled.div`\n    margin: 0 32px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n`;\n\nconst ReviewFieldsTable = styled.table`\n    width: 100%;\n    padding: 32px;\n\n    td {\n        padding: 16px;\n    }\n`;\n\nconst FullWidthButton = styled(Button)`\n    width: 100%;\n`;\n\n/*\n    This component allows users to write and submit reviews for a restaurant.\n    This includes uploading photos of their experience at the restaurant that will\n    be displayed on their review.\n*/\nexport const WriteAReviewPage = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [restaurant, setRestaurant] = useState({});\n    const [showError, setShowError] = useState(false);\n    const [ratingValue, setRatingValue] = useState(0);\n    const [commentsValue, setCommentsValue] = useState('');\n    const [imageFiles, setImageFiles] = useState([]);\n    const [imageUrls, setImageUrls] = useState([]);\n\n    // This is how we get URL parameters in React\n    const { id } = useParams();\n    const history = useHistory();\n\n    const { name, imageUrl } = restaurant || {};\n\n    useEffect(() => {\n        // Firebase code for loading the restaurant goes here\n    }, [id]);\n\n    // Selecting files can be a tiny bit complex, so I've taken\n    // care of that logic for you.\n    const handleFileSelect = async files => {\n        setImageFiles(files);\n        const urls = await mapAsync(files, readFile);\n        setImageUrls(urls);\n    }\n\n    const onClickSubmitReview = async () => {\n        // Check to make sure the user has actually filled out the form\n        if (ratingValue > 0 || commentsValue.length > 0) {\n            // Firebase code for submitting review goes here\n        } else {\n            setShowError(true);\n        }\n    }\n\n    return isLoading ? <Heading>Loading...</Heading> : (\n        <MaxWidthContentSection>\n            <Content>\n                <Heading>Write a Review for {name}</Heading>\n                <Thumbnail\n                    height=\"300px\"\n                    width=\"600px\"\n                    url={imageUrl} />\n                {showError\n                    ? <ErrorMessage\n                            style={{ marginTop: '16px' }}\n                        >Please fill out all fields</ErrorMessage>\n                    : null}\n                <ReviewFieldsTable>\n                    <tbody>\n                        <tr>\n                            <td>How would you rate your overall experience?</td>\n                            <td>\n                                <Rating\n                                    id='customer-rating'\n                                    name='star-rating'\n                                    value={ratingValue}\n                                    onChange={(_, newValue) => {\n                                        setShowError(false);\n                                        setRatingValue(newValue);\n                                    }} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Comments/Details</td>\n                            <td>\n                                <TextArea\n                                    value={commentsValue}\n                                    onChange={e => {\n                                        setShowError(false);\n                                        setCommentsValue(e.target.value);\n                                    }}\n                                    cols='40'\n                                    rows='5' />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Have any photos to share?</td>\n                            <td>\n                                <UploadMultipleFilesButton\n                                    onFilesUploaded={handleFileSelect} />\n                            </td>\n                        </tr>\n                    </tbody>\n                </ReviewFieldsTable>\n                <div style={{ display: 'flex', flexDirection: 'row', padding: '16px' }}>\n                    {imageUrls.map(url => (\n                        <img\n                            key={url}\n                            src={url}\n                            alt='something'\n                            height='100'\n                            style={{ display: 'inline', margin: '0 4px' }} />))}\n                </div>\n                <FullWidthButton\n                    onClick={onClickSubmitReview}\n                >Submit Review</FullWidthButton>\n            </Content>\n        </MaxWidthContentSection>\n    );\n}"]},"metadata":{},"sourceType":"module"}