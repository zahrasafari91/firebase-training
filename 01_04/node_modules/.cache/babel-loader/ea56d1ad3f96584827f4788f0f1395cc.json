{"ast":null,"code":"var _jsxFileName = \"/Users/zahra/Desktop/repository/firebase-training/01_04/src/reservations/MakeAReservationForm.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button, DatePicker, HeadingSmall, TextInput } from '../ui';\nconst Content = styled.div`\n    min-height: 375px;\n    min-width: 625px;\n`;\nconst TimeTable = styled.table`\n    margin-top: 32px;\n    text-align: center;\n    width: 100%;\n`; // Displays the color as green if the time is available,\n// i.e. if the \"isAvaialable\" prop is true\n\nconst TimeOption = styled.td`\n    border: 2px solid ${({\n  selected\n}) => selected ? '#a4d22a;' : 'transparent'};\n    border-radius: 8px;\n    color: ${({\n  isAvailable\n}) => isAvailable ? '#a4d22a' : '#888'};\n    cursor: pointer;\n    font-weight: bold;\n    padding: 16px;\n`;\nconst FullWidthButton = styled(Button)`\n    margin-top: 32px;\n    width: 100%;\n`;\n/*\n    This is just a hard-coded list of all the different\n    available times that our application allows. In reality,\n    we'd probably want to have this stored in a database as well,\n    but for simplicity, we're just going to do it this way.\n*/\n\nconst possibleTimes = [['5:00PM', '5:30PM', '6:00PM', '6:30PM'], ['7:00PM', '7:30PM', '8:00PM', '8:30PM'], ['9:00PM', '9:30PM', '10:00PM', '10:30PM']];\n/*\n    This component gets rendered inside of a modal when the user\n    clicks \"make a reservation\" on the restaurant detail page. It contains\n    a grid of different possible times that users can select and displays\n    times in green if they're currently available.\n*/\n\nexport const MakeAReservationForm = ({\n  restaurant,\n  onClose = () => {}\n}) => {\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const [availableTimesId, setAvailableTimesId] = useState(''); // As a side note, the date picker library we're using uses the Moment.js\n  // library. This will affect how we store and manipulate the selected date.\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTime, setSelectedTime] = useState(null);\n  const [numberOfPeople, setNumberOfPeople] = useState(2);\n  const [datePickerFocused, setDatePickerFocused] = useState(false);\n\n  const onSubmit = async () => {// Firebase code goes here\n  };\n\n  return /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeadingSmall, {\n    style: {\n      marginBottom: '32px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Choose a Date & and Time\"), /*#__PURE__*/React.createElement(DatePicker, {\n    id: \"date-picker\",\n    date: selectedDate,\n    onDateChange: newDate => {\n      setSelectedDate(newDate);\n    },\n    focused: datePickerFocused,\n    onFocusChange: ({\n      focused\n    }) => setDatePickerFocused(focused),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TimeTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, possibleTimes.map((timeGroup, i) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, timeGroup.map(time => {\n    const isAvailable = false; // We'll use Firebase data to populate this\n\n    return /*#__PURE__*/React.createElement(TimeOption, {\n      key: time,\n      isAvailable: isAvailable,\n      selected: selectedTime === time,\n      onClick: () => {\n        if (isAvailable) setSelectedTime(time);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 41\n      }\n    }, time);\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '32px',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"How many people?\", /*#__PURE__*/React.createElement(TextInput, {\n    style: {\n      marginLeft: '16px'\n    },\n    type: \"number\",\n    value: numberOfPeople,\n    onChange: e => setNumberOfPeople(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(FullWidthButton, {\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Make Reservation\"));\n};","map":{"version":3,"sources":["/Users/zahra/Desktop/repository/firebase-training/01_04/src/reservations/MakeAReservationForm.js"],"names":["React","useState","styled","Button","DatePicker","HeadingSmall","TextInput","Content","div","TimeTable","table","TimeOption","td","selected","isAvailable","FullWidthButton","possibleTimes","MakeAReservationForm","restaurant","onClose","availableTimes","setAvailableTimes","availableTimesId","setAvailableTimesId","selectedDate","setSelectedDate","selectedTime","setSelectedTime","numberOfPeople","setNumberOfPeople","datePickerFocused","setDatePickerFocused","onSubmit","marginBottom","newDate","focused","map","timeGroup","i","time","marginTop","textAlign","marginLeft","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SACIC,MADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,SAJJ,QAKO,OALP;AAOA,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAI;;;CAA3B;AAKA,MAAMC,SAAS,GAAGP,MAAM,CAACQ,KAAM;;;;CAA/B,C,CAMA;AACA;;AACA,MAAMC,UAAU,GAAGT,MAAM,CAACU,EAAG;wBACL,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAQ,GACxC,UADwC,GAExC,aAAc;;aAEX,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqBA,WAAW,GAAG,SAAH,GAAc,MAAO;;;;CALlE;AAWA,MAAMC,eAAe,GAAGb,MAAM,CAACC,MAAD,CAAS;;;CAAvC;AAKA;;;;;;;AAMA,MAAMa,aAAa,GAAG,CAClB,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CADkB,EAElB,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CAFkB,EAGlB,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,SAAhC,CAHkB,CAAtB;AAMA;;;;;;;AAMA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,OAAO,GAAG,MAAM,CAAE;AAAhC,CAAD,KAAwC;AACxE,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,CAAC,EAAD,CAAxD,CAFwE,CAIxE;AACA;;AACA,QAAM,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACyB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC2B,cAAD,EAAiBC,iBAAjB,IAAsC5B,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAAC6B,iBAAD,EAAoBC,oBAApB,IAA4C9B,QAAQ,CAAC,KAAD,CAA1D;;AAEA,QAAM+B,QAAQ,GAAG,YAAY,CACzB;AACH,GAFD;;AAIA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,eAEI,oBAAC,UAAD;AACI,IAAA,EAAE,EAAC,aADP;AAEI,IAAA,IAAI,EAAET,YAFV;AAGI,IAAA,YAAY,EAAEU,OAAO,IAAI;AACrBT,MAAAA,eAAe,CAACS,OAAD,CAAf;AACH,KALL;AAMI,IAAA,OAAO,EAAEJ,iBANb;AAOI,IAAA,aAAa,EAAE,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAiBJ,oBAAoB,CAACI,OAAD,CAPxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAWI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,aAAa,CAACoB,GAAd,CACG,CAACC,SAAD,EAAYC,CAAZ,kBACI;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,SAAS,CAACD,GAAV,CAAcG,IAAI,IAAI;AACnB,UAAMzB,WAAW,GAAG,KAApB,CADmB,CACQ;;AAC3B,wBACI,oBAAC,UAAD;AACI,MAAA,GAAG,EAAEyB,IADT;AAEI,MAAA,WAAW,EAAEzB,WAFjB;AAGI,MAAA,QAAQ,EAAEY,YAAY,KAAKa,IAH/B;AAII,MAAA,OAAO,EAAE,MAAM;AACX,YAAIzB,WAAJ,EAAiBa,eAAe,CAACY,IAAD,CAAf;AACpB,OANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOEA,IAPF,CADJ;AAUH,GAZA,CADL,CAFP,CADL,CADJ,CAXJ,eAmCI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,MAAb;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAEI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADX;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,KAAK,EAAEd,cAHX;AAII,IAAA,QAAQ,EAAEe,CAAC,IAAId,iBAAiB,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAnCJ,eA2CI,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEb,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA3CJ,CADJ;AA+CH,CA9DM","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport {\n    Button,\n    DatePicker,\n    HeadingSmall,\n    TextInput,\n} from '../ui';\n\nconst Content = styled.div`\n    min-height: 375px;\n    min-width: 625px;\n`;\n\nconst TimeTable = styled.table`\n    margin-top: 32px;\n    text-align: center;\n    width: 100%;\n`;\n\n// Displays the color as green if the time is available,\n// i.e. if the \"isAvaialable\" prop is true\nconst TimeOption = styled.td`\n    border: 2px solid ${({ selected }) => selected\n        ? '#a4d22a;'\n        : 'transparent'};\n    border-radius: 8px;\n    color: ${({ isAvailable }) => isAvailable ? '#a4d22a': '#888'};\n    cursor: pointer;\n    font-weight: bold;\n    padding: 16px;\n`;\n\nconst FullWidthButton = styled(Button)`\n    margin-top: 32px;\n    width: 100%;\n`;\n\n/*\n    This is just a hard-coded list of all the different\n    available times that our application allows. In reality,\n    we'd probably want to have this stored in a database as well,\n    but for simplicity, we're just going to do it this way.\n*/\nconst possibleTimes = [\n    ['5:00PM', '5:30PM', '6:00PM', '6:30PM'],\n    ['7:00PM', '7:30PM', '8:00PM', '8:30PM'],\n    ['9:00PM', '9:30PM', '10:00PM', '10:30PM'],\n];\n\n/*\n    This component gets rendered inside of a modal when the user\n    clicks \"make a reservation\" on the restaurant detail page. It contains\n    a grid of different possible times that users can select and displays\n    times in green if they're currently available.\n*/\nexport const MakeAReservationForm = ({ restaurant, onClose = () => {} }) => {\n    const [availableTimes, setAvailableTimes] = useState([]);\n    const [availableTimesId, setAvailableTimesId] = useState('');\n\n    // As a side note, the date picker library we're using uses the Moment.js\n    // library. This will affect how we store and manipulate the selected date.\n    const [selectedDate, setSelectedDate] = useState(null);\n    const [selectedTime, setSelectedTime] = useState(null);\n    const [numberOfPeople, setNumberOfPeople] = useState(2);\n    const [datePickerFocused, setDatePickerFocused] = useState(false);\n\n    const onSubmit = async () => {\n        // Firebase code goes here\n    }\n\n    return (\n        <Content>\n            <HeadingSmall style={{ marginBottom: '32px' }}>Choose a Date &amp; and Time</HeadingSmall>\n            <DatePicker\n                id='date-picker'\n                date={selectedDate}\n                onDateChange={newDate => {\n                    setSelectedDate(newDate);\n                }}\n                focused={datePickerFocused}\n                onFocusChange={({ focused }) => setDatePickerFocused(focused)}\n            />\n            <TimeTable>\n                <tbody>\n                    {possibleTimes.map(\n                        (timeGroup, i) => (\n                            <tr key={i}>\n                                {timeGroup.map(time => {\n                                    const isAvailable = false; // We'll use Firebase data to populate this\n                                    return (\n                                        <TimeOption\n                                            key={time}\n                                            isAvailable={isAvailable}\n                                            selected={selectedTime === time}\n                                            onClick={() => {\n                                                if (isAvailable) setSelectedTime(time);\n                                            }}\n                                        >{time}</TimeOption>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    )}\n\n                </tbody>\n            </TimeTable>\n            <div style={{ marginTop: '32px', textAlign: 'center' }}>\n                How many people?\n                <TextInput\n                    style={{ marginLeft: '16px' }}\n                    type=\"number\"\n                    value={numberOfPeople}\n                    onChange={e => setNumberOfPeople(e.target.value)} />\n            </div>\n            <FullWidthButton onClick={onSubmit}>Make Reservation</FullWidthButton>\n        </Content>\n    )\n}"]},"metadata":{},"sourceType":"module"}